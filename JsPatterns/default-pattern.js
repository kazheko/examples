
//classical patterns

// родительский конструктор
function Parent(name) {
    this.name = name || "Adam";
}
// добавление дополнительной функциональности в прототип
Parent.prototype.say = function (str) {
    console.log(this.name + ' say ' + str);
};
// пустой дочерний конструктор
function Child(name) { }

// здесь происходит наследовани€
inherit(Child, Parent);

function inherit(C, P) {
    C.prototype = new P();
}var child = new Child("Alex");child.say("hello");/*ќдним из недостатков этого шаблона €вл€етс€ то обсто€тельство, что 
дочерние объекты наследуют не только свойства прототипа родитель-
ского объекта, но и собственные свойства, добавленные к нему.*//*≈ще  один  недостаток  заключаетс€  в  том,  что  использование  универ-
сальной функции inherit() не позвол€ет передать параметры, получен-
ные при вызове дочерним конструктором, от дочернего конструктора 
родительскому.*/